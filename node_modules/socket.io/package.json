{
  "name": "socket.io",
  "version": "1.0.0",
  "description": "node.js realtime framework server",
  "keywords": [
    "realtime",
    "framework",
    "websocket",
    "tcp",
    "events",
    "socket",
    "io"
  ],
  "dependencies": {
    "debug": "*",
    "engine.io": "0.4.3",
    "socket.io-parser": "1.0.2",
    "socket.io-client": "LearnBoost/socket.io-client",
    "send": "~0.1.0",
    "redis": "0.7.3"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "supertest": "*"
  },
  "optionalDependencies": {
    "redis": "0.7.3"
  },
  "contributors": [
    {
      "name": "Guillermo Rauch",
      "email": "rauchg@gmail.com"
    },
    {
      "name": "Arnout Kazemier",
      "email": "info@3rd-eden.com"
    },
    {
      "name": "Vladimir Dronnikov",
      "email": "dronnikov@gmail.com"
    },
    {
      "name": "Einar Otto Stangvik",
      "email": "einaros@gmail.com"
    }
  ],
  "readme": "\n### This Readme corresponds to the upcoming 1.0 release. Please refer to http://socket.io for the current 0.9.x documentation.\n\n<hr />\n\n# socket.io\n\n[![Build Status](https://secure.travis-ci.org/LearnBoost/socket.io.png)](http://travis-ci.org/LearnBoost/socket.io)\n\n## How to use\n\n```js\nvar server = require('http').Server();\nvar io = require('socket.io')(server);\nio.on('connection', function(socket){\n  socket.on('event', function(data){});\n  socket.on('disconnect', function(){});\n});\nserver.listen(3000);\n```\n\n### In conjunction with `Express`\n\nStarting with **3.0**, express applications have become request handler\nfunctions that you pass to `http` or `http` `Server` instances. You need\nto pass the `Server` to `socket.io`, and not the express application\nfunction.\n\n```js\nvar app = require('express')();\nvar server = require('http').Server(app);\nvar io = require('socket.io')(server);\nio.on('connection', function(){ // â€¦ });\nserver.listen(3000);\n```\n\n## API\n\n### Server\n\n  Exposed by `require('socket.io')`.\n\n### Server()\n\n  Creates a new `Server`. Works with and without `new`:\n\n  ```js\n  var io = require('socket.io')();\n  // or\n  var Server = require('socket.io');\n  var io = new Server();\n  ```\n\n### Server(opts:Object)\n\n  Optionally, the first or second argument (see below) of the `Server`\n  constructor can be an options object.\n\n  The following options are supported:\n\n  - `static` sets the value for Server#static()\n  - `path` sets the value for Server#path()\n\n  Options are always passed to the `engine.io` `Server` that gets created.\n\n### Server(srv:http#Server, opts:Object)\n\n  Creates a new `Server` and attaches it to the given `srv`. Optionally\n  `opts` can be passed.\n\n### Server(port:Number, opts:Object)\n\n  Binds socket.io to a new `http.Server` that listens on `port`.\n\n### Server#static(v:Boolean):Server\n\n  If `v` is `true` the attached server (see `Server#attach`) will serve\n  the client files. Defaults to `true`.\n\n  This method has no effect after `attach` is called.\n\n  ```js\n  // pass a server and the `static` option\n  var io = require('socket.io')(http, { static: false });\n\n  // or pass no server and then you can call the method\n  var io = require('socket.io')();\n  io.static(false);\n  io.attach(http);\n  ```\n\n  If no arguments are supplied this method returns the current value.\n\n### Server#path(v:String):Server\n\n  Sets the path `v` under which `engine.io` and the static files will be\n  served. Defaults to `/socket.io`.\n\n  If no arguments are supplied this method returns the current value.\n\n### Server#adapter(v:Adapter):Server\n\n  Sets the adapter `v`. Defaults to an instance of the `Adapter` that\n  ships with socket.io which is memory based (see below).\n\n  If no arguments are supplied this method returns the current value.\n\n### Server#sockets:Namespace\n\n  The default (`/`) namespace.\n\n### Server#attach(srv:http#Server, opts:Object):Server\n\n  Attaches the `Server` to an engine.io instance on `srv` with the\n  supplied `opts` (optionally).\n\n### Server#attach(port:Number, opts:Object):Server\n\n  Attaches the `Server` to an engine.io instance that is bound to `port`\n  with the given `opts` (optionally).\n\n### Server#bind(srv:engine#Server):Server\n\n  Advanced use only. Binds the server to a specific engine.io `Server` \n  (or compatible API) instance.\n\n### Server#onconnection(socket:engine#Socket):Server\n\n  Advanced use only. Creates a new `socket.io` client from the incoming\n  engine.io (or compatible API) `socket`.\n\n### Server#of(nsp:String):Namespace\n\n  Initializes and retrieves the given `Namespace` by its pathname \n  identifier `nsp`.\n\n  If the namespace was already initialized it returns it right away.\n\n### Server#emit\n\n  Emits an event to all connected clients. The following two are \n  equivalent:\n\n  ```js\n  var io = require('socket.io');\n  io.sockets.emit('an event sent to all connected clients');\n  io.emit('an event sent to all connected clients');\n  ```\n\n  For other available methods, see `Namespace` below.\n\n### Namespace\n\n  Represents a pool of sockets connected under a given scope identified\n  by a pathname (eg: `/chat`).\n\n  By default the client always connects to `/`.\n\n#### Events\n\n  - `connection` / `connect`. Fired upon a connection.\n\n    Parameters:\n    - `Socket` the incoming socket.\n\n### Namespace#name:String\n\n  The namespace identifier property.\n\n### Namespace#connected:Object<Socket>\n\n  Hash of `Socket` objects that are connected to this namespace indexed\n  by `id`.\n\n### Socket\n\n  A `Socket` is the fundamental class for interacting with browser\n  clients.\n\n### Socket#rooms:Array\n\n  A list of strings identifying the rooms this socket is in.\n\n### Client\n\n  The `Client` class represents an incoming transport (engine.io)\n  connection. A `Client` can be associated with many multiplexed `Socket`\n  that belong to different `Namespace`s.\n\n### Adapter\n\n  The `Adapter` is in charge of keeping track of what rooms each socket\n  is connected to, and passing messages to them.\n\n  By default the `Adapter` is memory based. In order to pass messages\n  across multiple processes, make sure to use an appropriate adapter.\n  (configurable through `Server#adapter`).\n\n## License\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "_id": "socket.io@1.0.0",
  "dist": {
    "shasum": "052dd9600c7f46f17af66111abd96eadb825e74d"
  },
  "_from": "socket.io"
}
